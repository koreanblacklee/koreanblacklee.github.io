<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by John Doe]]></title><description><![CDATA[Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu.]]></description><link>http://seung-jae.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Mon, 15 Jul 2019 23:16:21 GMT</lastBuildDate><item><title><![CDATA[Python Foundation2]]></title><description><![CDATA[Python 기초 문법 정리2]]></description><link>http://seung-jae.github.io//posts/python/foundation2</link><guid isPermaLink="false">http://seung-jae.github.io//posts/python/foundation2</guid><pubDate>Sun, 14 Jul 2019 08:46:37 GMT</pubDate><content:encoded></content:encoded></item><item><title><![CDATA[Django 소셜로그인(google, kakao) 구현]]></title><description><![CDATA[Django + React로 웹사이트를 제작할 때 별도의 라이브러리를 사용하지 않고 구글 및 카카오 소셜로그인을 구현]]></description><link>http://seung-jae.github.io//posts/djangsociallogin/</link><guid isPermaLink="false">http://seung-jae.github.io//posts/djangsociallogin/</guid><pubDate>Sat, 13 Jul 2019 19:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Wecode에서 진행하는 첫번재 프로젝트에서 소셜로그인과 회원가입을 구현해봤다.&lt;br&gt;
자체 회원가입 및 로그인을 해봤기 때문에 비슷하다고 생각해서 금방 끝날 줄 알았는데 오산이였다. 프론트엔드에서 google과 kakao토큰을 전달받은 후 사용자 정보를 받는 것을 해봤고, 그와 관련된 포스팅을 남긴다.
(별도의 라이브러리를 이용하지 않아서 코드가 길고 복잡할 수 있으며, 블로그를 보기 전에 충분히 혼자서 고민해보고 어떤 로직으로 돌아가는지 봐줬으면 한다.)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#%EB%AA%A9%EC%B0%A8&quot; aria-label=&quot;목차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;목차&lt;/h2&gt;
&lt;h4 id=&quot;1-소셜로그인이란&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;1 소셜로그인이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 소셜로그인이란?&lt;/h4&gt;
&lt;h4 id=&quot;2-소셜로그인-공통&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B3%B5%ED%86%B5&quot; aria-label=&quot;2 소셜로그인 공통 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소셜로그인 공통&lt;/h4&gt;
&lt;h4 id=&quot;3-구글-소셜-회원가입-및-로그인-구현&quot;&gt;&lt;a href=&quot;#3-%EA%B5%AC%EA%B8%80-%EC%86%8C%EC%85%9C-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;3 구글 소셜 회원가입 및 로그인 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 구글 소셜 회원가입 및 로그인 구현&lt;/h4&gt;
&lt;h4 id=&quot;4-카카오-소셜-회원가입-및-로그인-구현&quot;&gt;&lt;a href=&quot;#4-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%86%8C%EC%85%9C-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;4 카카오 소셜 회원가입 및 로그인 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 카카오 소셜 회원가입 및 로그인 구현&lt;/h4&gt;
&lt;h2 id=&quot;1-소셜로그인이란-1&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%B4%EB%9E%80-1&quot; aria-label=&quot;1 소셜로그인이란 1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 소셜로그인이란?&lt;/h2&gt;
&lt;p&gt;유저가 별도의 회원가입 없이 유저가 이용하고 있는 소셜 웹사이트의 로그인정보를 사용하여 웹사이트에 로그인계정을 얻게되어 회원으로 접근할 수 있도록 하는 방법.&lt;br&gt;
즉, 특별한 회원가입의 절차를 거치지 않고 기존에 가입된 소셜 웹사이트의 아이디와 패스워드로 이용하고 싶은 다른 사이트에 로그인 할 수 있는 기능&lt;/p&gt;
&lt;h4 id=&quot;장점&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;많은 계정과 비밀번호를 기억하지 않아도 되는 편리함을 제공함   &lt;/li&gt;
&lt;li&gt;해외 소셜을 이용하면 외국인을 대상으로 하는 서비스를 제공하기도 쉬워짐&lt;/li&gt;
&lt;li&gt;네이버는 네이버 계정으로 가입된 여러 서비스가 나타남&lt;/li&gt;
&lt;li&gt;서버에 회원의 개인정보를 최소한으로 저장할 수 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;단점&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;소셜계정을 해킹당했거나 소셜계정을 탈퇴한 경우 문제가 생길 수 있음   &lt;/li&gt;
&lt;li&gt;하나의 소셜을 가입한 뒤 가입한 사실을 모르고 추가로 가입할 수도 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;단점도 있지만 여러가지 장점이 있어서 요즘 대부분의 웹사이트나 앱에서 소셜로그인을 통한 로그인을 많이 사용하고 있다.
&lt;img src=&quot;/media/social_login.png&quot; alt=&quot;Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi.&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;로직순서백엔드-기준&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EC%A7%81%EC%88%9C%EC%84%9C%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B8%B0%EC%A4%80&quot; aria-label=&quot;로직순서백엔드 기준 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로직순서(백엔드 기준)&lt;/h4&gt;
&lt;p&gt;구글, 카카오 등 기본적인 로직순서는 동일하여 한번에 정리함. &lt;/p&gt;
&lt;p&gt;1)프론트엔드에서 유저의 소셜로그인에 필요한 토큰을 전달받음&lt;br&gt;
2)받은 토큰을 각각의 소셜 api에 보내서 회원의 정보를 요청&lt;br&gt;
3)소셜 플랫폼에서 받은 자료를 파이썬에서 활용하기 위해(?) JSON화하여 변수에 저장&lt;br&gt;
4)JSON화 한 데이터 중 회원의 고유값을 저장하고 있는 키의 값이 DB에 저장되어 있는지 확인&lt;/p&gt;
&lt;p&gt;4-1)DB에 고유값이 저장되어 있다면, 이미 기존에 가입이 되어 있는 유저이므로, JsonResponse로 Access_token과 정상적으로 처리완료되었고, 프론트엔드에서 필요로 하는 회원의 정보를 프론트엔드에게 전달&lt;br&gt;
4-2)DB에 고유값이 저장되어 있지 않다면, JSON화한 데이터에서 필요한 자료를 데이터베이스에 저장함과 동시에 프론트엔드에게 JsonResponse로 정상적으로 처리완료되었고, Access Token과 회원의 정보를 전달&lt;/p&gt;
&lt;h4 id=&quot;2-소셜로그인-공통내용&quot;&gt;&lt;a href=&quot;#2-%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B3%B5%ED%86%B5%EB%82%B4%EC%9A%A9&quot; aria-label=&quot;2 소셜로그인 공통내용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 소셜로그인 공통내용&lt;/h4&gt;
&lt;p&gt;1)models.py
SocialPlatform이라는 새로운 class 생성 후 platform이라는 메소드를 생성(어떤 소셜플랫폼을 이용하여 가입했는지 확인하기 위해)&lt;br&gt;
기존유저 클래스에 social메소드를 ForeignKey로 메소드 추가
각 소셜플랫폼의 회원 고유의 정보를 저장항 social_login_id 메소드 추가&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SocialPlatform(models.Model):
    platform = models.CharField(max_length=20, default=0)

    class Meta:
        db_table = &amp;quot;social_platform&amp;quot;

class User(models.Model):
    ~중략~
    social          = models.ForeignKey(SocialPlatform, on_delete=models.CASCADE, max_length=20, blank=True, default=1)
    social_login_id = models.CharField(max_length=50, blank=True)
    ~중략~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2)urls.py
구글과 카카오의 소셜로그인 엔드포인트 작성&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from .views import UserView, LoginView, GoogleLoginView, KakaoLoginView
urlpatterns = [
    path(&amp;#39;/login/google&amp;#39;,GoogleLoginView.as_view()),
    path(&amp;#39;/login/kakao&amp;#39;,KakaoLoginView.as_view())
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;3-구글-회원가입-및-로그인-구현&quot;&gt;&lt;a href=&quot;#3-%EA%B5%AC%EA%B8%80-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;3 구글 회원가입 및 로그인 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 구글 회원가입 및 로그인 구현&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/identity/sign-in/web/backend-auth&quot;&gt;구글&lt;/a&gt; 페이지를 확인해보니 이메일이 없을수도 있고, 회원의 고유키값(sub)이 따로 있기 때문에 해당 값을 social&lt;em&gt;login&lt;/em&gt;id에 저장함(각 줄의 코드 뒤에 주석을 달아두었으니 필요하다면 복사하여 메모장이나 에디터에서 확인하면 쉽게 볼 수 있음)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class GoogleLoginView(View):
    # 소셜로그인을 하면 User테이블에 아이디와 패스워드를 담아두고
    
    def get(self,request): # id_token만 해서 헤더로 받기
        token    = request.headers[&amp;quot;Authorization&amp;quot;] # 프론트엔드에서 HTTP로 들어온 헤더에서 id_token(Authorization)을 변수에 저장
        url      = &amp;#39;https://oauth2.googleapis.com/tokeninfo?id_token=&amp;#39; # 토큰을 이용해서 회원의 정보를 확인하기 위한 gogle api주소
        response = requests.get(url+token) #구글에 id_token을 보내 디코딩 요청
        user     = response.json() # 유저의 정보를 json화해서 변수에 저장

        if User.objects.filter(social_login_id = user[&amp;#39;sub&amp;#39;]).exists(): #기존에 가입했었는지 확인
            user_info           = User.objects.get(social_login_id=user[&amp;#39;sub&amp;#39;]) # 가입된 데이터를 변수에 저장
            encoded_jwt         = jwt.encode({&amp;#39;id&amp;#39;: user[&amp;quot;sub&amp;quot;]}, wef_key, algorithm=&amp;#39;HS256&amp;#39;) # jwt토큰 발행
            none_member_type    = 1

            return JsonResponse({ # 프론트엔드에게 access token과 필요한 데이터 전달
                &amp;#39;access_token&amp;#39;  : encoded_jwt.decode(&amp;#39;UTF-8&amp;#39;),
                &amp;#39;user_name&amp;#39;     : user[&amp;#39;name&amp;#39;],
                &amp;#39;user_type&amp;#39;     : none_member_type,
                &amp;#39;user_pk&amp;#39;       : user_info.id
            }, status = 200)            
        else:
            new_user_info = User( # 처음으로 소셜로그인을 했을 경우 회원으 정보를 저장(email이 없을 수도 있다 하여, 있으면 저장하고, 없으면 None으로 표기)
                social_login_id = user[&amp;#39;sub&amp;#39;],
                name            = user[&amp;#39;name&amp;#39;],
                social          = SocialPlatform.objects.get(platform =&amp;quot;google&amp;quot;),
                email           = user.get(&amp;#39;email&amp;#39;, None)
            )
            new_user_info.save() # DB에 저장
            encoded_jwt         = jwt.encode({&amp;#39;id&amp;#39;: new_user_info.id}, wef_key, algorithm=&amp;#39;HS256&amp;#39;) # jwt토큰 발행
        
            return JsonResponse({ # DB에 저장된 회원의 정보를 access token과 같이 프론트엔드에게 전달
            &amp;#39;access_token&amp;#39;      : encoded_jwt.decode(&amp;#39;UTF-8&amp;#39;),
            &amp;#39;user_name&amp;#39;         : new_user_info.name,
            &amp;#39;user_type&amp;#39;         : none_member_type,
            &amp;#39;user_pk&amp;#39;           : new_user_info.id,
            }, status = 200)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;4-카카오-회원가입-및-로그인-구현&quot;&gt;&lt;a href=&quot;#4-%EC%B9%B4%EC%B9%B4%EC%98%A4-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;4 카카오 회원가입 및 로그인 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 카카오 회원가입 및 로그인 구현&lt;/h4&gt;
&lt;p&gt;기본적으로 구글 소셜로그인과 비슷하기 때문에 추가 설명은 생략하겟음.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class KakaoLoginView(View): #카카오 로그인

    def get(self, request):
        access_token = request.headers[&amp;quot;Authorization&amp;quot;]
        headers      =({&amp;#39;Authorization&amp;#39; : f&amp;quot;Bearer {access_token}&amp;quot;})
        url          = &amp;quot;https://kapi.kakao.com/v1/user/me&amp;quot; # Authorization(프론트에서 받은 토큰)을 이용해서 회원의 정보를 확인하기 위한 카카오 API 주소
        response     = requests.request(&amp;quot;POST&amp;quot;, url, headers=headers) # API를 요청하여 회원의 정보를 response에 저장
        user         = response.json()

        if User.objects.filter(social_login_id = user[&amp;#39;id&amp;#39;]).exists(): #기존에 소셜로그인을 했었는지 확인
            user_info          = User.objects.get(social_login_id=user[&amp;#39;id&amp;#39;])
            encoded_jwt        = jwt.encode({&amp;#39;id&amp;#39;: user_info.id}, wef_key, algorithm=&amp;#39;HS256&amp;#39;) # jwt토큰 발행

            return JsonResponse({ #jwt토큰, 이름, 타입 프론트엔드에 전달
                &amp;#39;access_token&amp;#39; : encoded_jwt.decode(&amp;#39;UTF-8&amp;#39;),
                &amp;#39;user_name&amp;#39;    : user_info.name,
                &amp;#39;user_pk&amp;#39;      : user_info.id
            }, status = 200)            
        else:
            new_user_info = User(
                social_login_id = user[&amp;#39;id&amp;#39;],
                name            = user[&amp;#39;properties&amp;#39;][&amp;#39;nickname&amp;#39;],
                social          = SocialPlatform.objects.get(platform =&amp;quot;kakao&amp;quot;),
                email           = user[&amp;#39;properties&amp;#39;].get(&amp;#39;email&amp;#39;, None)
            )
            new_user_info.save()
            encoded_jwt         = jwt.encode({&amp;#39;id&amp;#39;: new_user_info.id}, wef_key, algorithm=&amp;#39;HS256&amp;#39;) # jwt토큰 발행
            none_member_type    = 1
            return JsonResponse({
                &amp;#39;access_token&amp;#39; : encoded_jwt.decode(&amp;#39;UTF-8&amp;#39;),
                &amp;#39;user_name&amp;#39;    : new_user_info.name,
                &amp;#39;user_pk&amp;#39;      : new_user_info.id,
                }, status = 200)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Python Foundation1]]></title><description><![CDATA[Python 기초 문법 정리]]></description><link>http://seung-jae.github.io//posts/python/foundation1</link><guid isPermaLink="false">http://seung-jae.github.io//posts/python/foundation1</guid><pubDate>Fri, 12 Jul 2019 08:46:37 GMT</pubDate><content:encoded>&lt;p&gt;파이썬 홈페이지에선 파이썬 코딩 표준에 관한 문서를 정의해두었고, 기초를 익힌 후 참조하면 코딩스타일을 익히는데 많은 도움이 될 듯 하다&lt;br&gt;
&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008&quot;&gt;파이썬 공식홈페이지 코딩스타일 정의&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;들여쓰기indentation&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%97%AC%EC%93%B0%EA%B8%B0indentation&quot; aria-label=&quot;들여쓰기indentation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들여쓰기(Indentation)&lt;/h4&gt;
&lt;p&gt;파이썬은 코딩블럭을 표시하기 위해 들여쓰기(Indentation)을 사용하며, 문장을 예로 들어보면 if, for, def 등 끝에 콜론(:)을 사용하면 내부 코딩블럭들은 동일한 들여쓰기를 사용해야 한다.&lt;br&gt;
일반적으로 공백(스페이스) 4개를 사용하며, 모두 같은 들여쓰기를 쓰지 않고 하나만 5개의 공백을 사용하면 IndentationError가 발생한다.&lt;/p&gt;
&lt;h4 id=&quot;표준-라이브러리&quot;&gt;&lt;a href=&quot;#%ED%91%9C%EC%A4%80-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC&quot; aria-label=&quot;표준 라이브러리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;표준 라이브러리&lt;/h4&gt;
&lt;p&gt;파이썬은 표준라이브러리들을 제공하고 있는데, 불러다 사용하기 위해선 import문을 사용한다.  &lt;/p&gt;
&lt;h4 id=&quot;comment&quot;&gt;&lt;a href=&quot;#comment&quot; aria-label=&quot;comment permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comment&lt;/h4&gt;
&lt;p&gt;코딩 외의 설명이나 기타 내용을 작성한 곳에서 사용하는데, 사용위치는 상관없지만, 보통 #사인 뒤에 하나의 공백을 두는 것을 권장한다.&lt;/p&gt;
&lt;h4 id=&quot;기본-데이터-타입&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;기본 데이터 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 데이터 타입&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt;           = 정수형&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;float&lt;/code&gt;         = 소수점을 포함한 실수&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;bool&lt;/code&gt;          = 참, 거짓을 표현&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt;          = Null과 같은 표현&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;ComplexNumber&lt;/code&gt; = a+bj(파이썬에선 j를 사용함)
a의 값을 얻기위해선 .real, b의값을 얻으려면 .imag  &lt;/p&gt;
&lt;h4 id=&quot;포맷팅-연산자formatting-operator&quot;&gt;&lt;a href=&quot;#%ED%8F%AC%EB%A7%B7%ED%8C%85-%EC%97%B0%EC%82%B0%EC%9E%90formatting-operator&quot; aria-label=&quot;포맷팅 연산자formatting operator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;포맷팅 연산자(Formatting Operator)&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;%s&lt;/code&gt;	       문자열 (파이썬 객체를 str()을 사용하여 변환)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%r&lt;/code&gt;	       문자열 (파이썬 객체를 repr()을 사용하여 변환)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%c&lt;/code&gt;	       문자(char)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%d&lt;/code&gt; 또는 %i	정수 (int)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%f&lt;/code&gt; 또는 %F	부동소수 (float) (%f 소문자 / %F 대문자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%e&lt;/code&gt; 또는 %E	지수형 부동소수 (소문자 / 대문자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%g&lt;/code&gt; 또는 %G	일반형: 값에 따라 %e 혹은 %f 사용 (소문자 / 대문자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%o&lt;/code&gt; 또는 %O	8진수 (소문자 / 대문자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%x&lt;/code&gt; 또는 %X	16진수 (소문자 / 대문자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;%%&lt;/code&gt;	       % 퍼센트 리터럴    &lt;/p&gt;
&lt;h4 id=&quot;str-metod문자열-메서드&quot;&gt;&lt;a href=&quot;#str-metod%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;str metod문자열 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Str Metod(문자열 메서드)&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str.join()&lt;/code&gt; 여러개의 문자열을 하나로 합쳐 줌&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;str.split()&lt;/code&gt; 특정 문자열을 괄호안의 기준으로 분리하여 리스트로 리턴&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;str.format()&lt;/code&gt; 문자열에 포함된 ’{}‘들의 값을 format()의 값으로 대입    &lt;/p&gt;
&lt;h4 id=&quot;if-while-for&quot;&gt;&lt;a href=&quot;#if-while-for&quot; aria-label=&quot;if while for permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;if, while, for&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 주로 참과 거짓, 혹은 해당 값인지 확인하기 위해 사용됨&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;while&lt;/code&gt; 조건문이 거짓이 될때까지 계속 실행됨
&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; 리스트, Tuple, 문자열 등의 인덱스를 하나하나 확인할 때 주로 사용됨( ex) for i in range(a):)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;range&lt;/code&gt; 반복문과 연동되어 많이 사용됨&lt;/p&gt;
&lt;h4 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List&lt;/h4&gt;
&lt;p&gt;Mutable 데이타 타입으로 여러 요소들을 갖는 집합체며, 추가, 수정, 삭제가 가능함&lt;br&gt;
Indexing이란 a.[n]과 같이 리스트안의 특정 요소만을 선택하기 위해 사용됨 &lt;/p&gt;
&lt;h4 id=&quot;list-method&quot;&gt;&lt;a href=&quot;#list-method&quot; aria-label=&quot;list method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List Method&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;slice&lt;/code&gt; x = [처음 인덱스:마지막인덱스]와 같이 부분집합의 범위를 지정하여 필요한 데이터만 추출할 수 있음, 만약 처음 인덱스나 마지막 인덱스 중 한가지의 값이 공란으로도 사용가능함&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;append&lt;/code&gt; a.append()로 표현되며, 괄호안의 데이터를 a의 마지막 값을 추가 할 수 있음
&lt;code class=&quot;language-text&quot;&gt;del&lt;/code&gt; del a[0]과 같이 사용되며, 리스트 중 0번째 데이터를 삭제할 수 있음&lt;br&gt;
a[1] = 11과 같이 값을 수정할 수도 있음   &lt;/p&gt;
&lt;h4 id=&quot;list-기타&quot;&gt;&lt;a href=&quot;#list-%EA%B8%B0%ED%83%80&quot; aria-label=&quot;list 기타 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List 기타&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;c = a + b&lt;/code&gt; a와 b가 리스트라는 가정 하에 2개의 리스트를 하나의 리스트로 병합할 수 있음
&lt;code class=&quot;language-text&quot;&gt;x = a * 3&lt;/code&gt; x에 a리스트를 3번 반복한 값을 저장함&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;a = list.index(&amp;#39;&amp;#39;)&lt;/code&gt; a변수에 list의 값 중 index괄호 안에 있는 값을 검색해서 저장함
&lt;code class=&quot;language-text&quot;&gt;a = list.count(&amp;#39;&amp;#39;)&lt;/code&gt; a변수에 list의 값 중 count괄호 안에 있는 값이 몇번 나오는지 저장함
&lt;code class=&quot;language-text&quot;&gt;list = [for n in range(5)]&lt;/code&gt; 리스트에 for문을 넣어 실행시킬수도 있음&lt;/p&gt;
&lt;h4 id=&quot;tuple&quot;&gt;&lt;a href=&quot;#tuple&quot; aria-label=&quot;tuple permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple&lt;/h4&gt;
&lt;p&gt;리스트와 유사하나 새로운값을 추가, 갱신, 삭제할 수 없다 =&gt; immutable 데이터 타입&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;tu = (345,)&lt;/code&gt; 만약 튜플의 요소가 하나일 경우 콤마를 사용하면 tuple값으로 저장됨&lt;/p&gt;
&lt;h4 id=&quot;tuple-method&quot;&gt;&lt;a href=&quot;#tuple-method&quot; aria-label=&quot;tuple method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple Method&lt;/h4&gt;
&lt;p&gt;튜플의 값을 변경할 순 없지만, 튜플의 값을 다른 변수에 저장하여 사용할 수 있다.
&lt;code class=&quot;language-text&quot;&gt;a = tu[1]&lt;/code&gt; 튜플값 중 인덱스가 1인 값을 a변수에 저장함
&lt;code class=&quot;language-text&quot;&gt;s = tu[1:]&lt;/code&gt;  튜플 값 중 인덱스가 1인 값부터 마지막 값까지 s변수에 저장
&lt;code class=&quot;language-text&quot;&gt;c = a + b&lt;/code&gt; a와 b가 모두 튜플일 때, c변수에 두개의 데이터를 저장
&lt;code class=&quot;language-text&quot;&gt;c = a * 3&lt;/code&gt; 리스트와 마찬가지로 a튜플의 값을 3번 반복하여 c에 저장
&lt;code class=&quot;language-text&quot;&gt;a, b = (&amp;#39;lee&amp;#39;, &amp;#39;sj&amp;#39;)&lt;/code&gt; a튜플에 ‘lee’, b튜플에 ‘sj’를 각각 저장 (lee, sj는 제 이름을 예시로 한것임)&lt;/p&gt;
&lt;h4 id=&quot;dictionarydict&quot;&gt;&lt;a href=&quot;#dictionarydict&quot; aria-label=&quot;dictionarydict permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dictionary(dict)&lt;/h4&gt;
&lt;p&gt;{키(Key):값(Value)} 쌍을 요소로 갖는 데이터 타입이며, 키를 이용해서 값을 빠르게 찾을 수 있는 hashtable 구조의 데이터이다. 또한, “dict”클래스로 구현되어 있으며, 키는 수정할 수 없는 immutable타입이어야 함 =&gt; 튜플은 키로 쓸 수 있는 반면 리스트는 사용할 수 없음&lt;/p&gt;
&lt;h4 id=&quot;입력-추가-수정-삭제-읽기-등&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5-%EC%B6%94%EA%B0%80-%EC%88%98%EC%A0%95-%EC%82%AD%EC%A0%9C-%EC%9D%BD%EA%B8%B0-%EB%93%B1&quot; aria-label=&quot;입력 추가 수정 삭제 읽기 등 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력, 추가, 수정, 삭제, 읽기 등&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;c = a[&amp;#39;b&amp;#39;]&lt;/code&gt; a의 딕셔너리 중 b의 키를 가진 값을 c변수에 저장함
&lt;code class=&quot;language-text&quot;&gt;a[&amp;#39;b&amp;#39;] = c&lt;/code&gt; c를 a딕셔너리 중 b의 키를 가진 값으로 수정함&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a = [(&amp;quot;A&amp;quot;,1),(B,2)]
c = dict(a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a = (b=1,c=2)
c = dict(a)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a의 값을 딕셔너리화하여 c에 저장함(만약 기존 데이터가 있다면, 각 키의 값들은 수정됨)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;a[&amp;quot;b&amp;quot;] = &amp;quot;c&amp;quot;&lt;/code&gt; a딕셔너리 중 b의 키가 없다면 c를 값으로 추가함
&lt;code class=&quot;language-text&quot;&gt;del a[&amp;quot;b&amp;quot;]&lt;/code&gt; a딕셔너리 중 b의 키를 삭제함(값도 같이 삭제됨)&lt;/p&gt;
&lt;h4 id=&quot;dict-method&quot;&gt;&lt;a href=&quot;#dict-method&quot; aria-label=&quot;dict method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dict Method&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dict.keys()&lt;/code&gt; =&gt; “dict”에 저장된 키값들을 리턴&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;dict.values()&lt;/code&gt; =&gt; “dict”에 저장된 값들을 리턴&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;dict.items()&lt;/code&gt; =&gt; “dict”의 키와 값을 dict&lt;em&gt;items 객체로 리턴함(dict&lt;/em&gt;items를 리스트로 변환하기 위해서는 list()를 사용하면 됨 ex) itemlist = list(items)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;dict.get(&amp;quot;key&amp;quot;)&lt;/code&gt; =&gt; 키의 값을 리턴하는건 동일하지만, 키가 없을 경우 None을 리턴하므로 더 유용하게 사용할 수 있다.(&lt;code class=&quot;language-text&quot;&gt;dict[&amp;quot;key&amp;quot;]&lt;/code&gt;를 하게 될 경우 에러메세지가 출력됨)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;if &amp;quot;key_name&amp;quot; in dict:&lt;/code&gt; =&gt; dict에 key_name이 있는지 확인&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;dict.clear()&lt;/code&gt; =&gt; dict의 키와 값을 모두 삭제&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dict.update({key_name1: value1, key_name2:value2})&lt;/code&gt; =&gt; dict에서 key&lt;em&gt;name1,key&lt;/em&gt;name2의 값을 각각 수정할 때 사용됨&lt;/p&gt;</content:encoded></item><item><title><![CDATA[pyJWT를 이용한 Python Django Login Decorator]]></title><description><![CDATA[Python3 pyJWT를 이용한 파이썬 로그인 데코레이터 구현]]></description><link>http://seung-jae.github.io//posts/decorator/</link><guid isPermaLink="false">http://seung-jae.github.io//posts/decorator/</guid><pubDate>Wed, 10 Jul 2019 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;(읽기 쉽고, 쉽게 표현하기 위해 경어를 사용한 점 양해부탁드립니다.)&lt;/p&gt;
&lt;p&gt;며칠동안 전전긍긍하던 파이썬 로그인 데코레이터를 완료하였고, 구현하는 과정 및 결과에 대해 포스팅 해보려 한다. 개발을 배우는 입장에서 정리를 하다보니 부족한 부분이 있을 수 있으니 양해바란다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/image-2.jpg&quot; alt=&quot;Nulla faucibus vestibulum eros in tempus. Vestibulum tempor imperdiet velit nec dapibus&quot;&gt;&lt;/p&gt;
&lt;p&gt;데코레이터 구현을 위해 인터넷을 계속 찾아다녀봤지만, pyJWT를 이용한 구현은 찾아보기가 힘들었고, 오늘 배운것을 정리하는 것과 pyJWT를 통한 인증구현이 필요한 사람을 위해 정리하려 한다.  &lt;/p&gt;
&lt;p&gt;먼저 JWT는,&lt;br&gt;
JavaScript를 이용해 유저가 웹사이트에 로그인 한 후에 발생하는 이벤트(댓글, 게시판 글쓰기 등), 여러가지 서비스를 이용하기 위한 권한을 가진 유저인지 확인하기 위해서 많이 쓰이고 있다고 한다.
총 3개의 구문으로 되어있고, 헤더.내용.서명 으로 이루어져 있다.
(자세한 내용은 &lt;a href=&quot;https://jwt.io/&quot;&gt;JWT&lt;/a&gt;공식홈페이지나 다른 사이트를 참고해주길 바란다.)&lt;/p&gt;
&lt;p&gt;혹여나 데코레이터가 뭔지 모르는 분들을 위해 설명드리자면,&lt;br&gt;
대상 함수를 wrapping하고, 이 함수 앞뒤로 꾸며질 구문들에 대해 손쉽게 재사용할 수 있도록 다른 곳에 미리 함수를 만들어 둔 것이라고만 알고 있으면 될 듯 하다. 이번 프로젝트를 예로 들자면, 회원이 댓글작성이나 특정권한을 가지고 있는지 확인하기 위해 데코레이터를 구현했다.&lt;br&gt;
ex)사용예시&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@decorator
def comment:
  ~~~&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(더 전문적인 설명이 필요하다면 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0318/&quot;&gt;파이썬&lt;/a&gt; 공식홈페이지나 구글링을 해보길 권한다.)&lt;/p&gt;
&lt;p&gt;개발순서는 회원가입, 로그인을 이미 구현한 상태이고, 데코레이터를 구현해야 하는데 먼저 목적과 로직을 디테일하게 작성한 내용을 먼저 얘기해보겠다.&lt;/p&gt;
&lt;h3 id=&quot;구현하고자-하는-데코레이터의-목적&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0%EC%9E%90-%ED%95%98%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%AA%A9%EC%A0%81&quot; aria-label=&quot;구현하고자 하는 데코레이터의 목적 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구현하고자 하는 데코레이터의 목적&lt;/h3&gt;
&lt;p&gt;웹사이트 상에서 권한(로그인, 혹은 관리자)을 가진 유저만 이용가능한 서비스를 이용할 수 곳에 한해서, 유저가 로그인한 유저인지, 이용가능한 권한을 가진 유저인지(게시판 글쓰기, 관리자페이지 이용권한, 포스팅 작성 등) 등을 확인하기 위해서 미리 선언해 둔 함수를 사용하기 위한 목적 &lt;/p&gt;
&lt;h3 id=&quot;세부-로직&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EB%B6%80-%EB%A1%9C%EC%A7%81&quot; aria-label=&quot;세부 로직 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세부 로직&lt;/h3&gt;
&lt;p&gt;유저로그인: 프론트엔드에게 해당 아이디로 발행한 암호화된 jwt토큰을 전달&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;해당유저의 정보를 확인하기 위해 프론트엔드에서 HTTP 헤더를 통해 토큰을 전달 받기&lt;br&gt;
=&gt;만약 토큰이 없다면 서버에서는 에러코드를 프론트엔드에게 전달하고, 유저의 현재 페이지를 로그인페이지로 이동해달라고 프론트엔드에게 요청&lt;/li&gt;
&lt;li&gt;백엔드는 암호화되어 전달받은 jwt토큰을 decode하고&lt;br&gt;
=&gt; decode에서 오류가 난다면, 해당 웹페이지에서 발행한 토큰이 아니므로, INVALID_TOKEN 에러를 프론트엔드에게 전달&lt;/li&gt;
&lt;li&gt;Django models.py에 저장된 데이터와 decode한 데이터가 일치하는 회원의 정보를 변수에 저장&lt;br&gt;
=&gt; 유저의 정보가 없다면, UNKNOWN_USER라는 에러메세지를 프론트엔드에게 전달&lt;/li&gt;
&lt;li&gt;request할 객체에 user변수를 저장하여 프론트엔드에게 전달&lt;/li&gt;
&lt;li&gt;위 내용이 잘 실행되는지 httpie나 다른 방법으로 테스트 및 검증진행&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;더 자세한 사항은 코드 밑에 써두도록 하겠다.  &lt;/p&gt;
&lt;h3 id=&quot;코딩-순서&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%94%A9-%EC%88%9C%EC%84%9C&quot; aria-label=&quot;코딩 순서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코딩 순서&lt;/h3&gt;
&lt;p&gt;(세부로직 순서에 맞게 작성)&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;pyJWT설치
&lt;code class=&quot;language-text&quot;&gt;pip install pyJWT&lt;/code&gt; 및 django app디렉토리에서 utils.py 파일 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def login_decorator(func):

    def wrapper(self, request, *args, **kwargs): # self &amp;gt; 받아온 함수를 다시 넘긴다 access token이 헤더에 들어있음&amp;gt; json.load가 아님(헤더에 있는 값만 할 것임) &amp;gt; 키 벨류로 돼있는 양식 &amp;gt; 
    
        if &amp;quot;Authorization&amp;quot; not in request.headers: #1)번
            return JsonResponse({&amp;quot;error_code&amp;quot;:&amp;quot;INVALID_LOGIN&amp;quot;}, status=401)
        
        encode_token = request.headers[&amp;quot;Authorization&amp;quot;] 

        try:
            data = jwt.decode(encode_token, wef_key, algorithm=&amp;#39;HS256&amp;#39;) 
            #2번)decode를 하게 될 경우 프론트엔드에 전달했던 페이로드값만 나옴(즉 로그인뷰에 바디)

            user = User.objects.get(id = data[&amp;quot;id&amp;quot;])#3번
            request.user = user #4번
        except jwt.DecodeError: #2-1번 error
            return JsonResponse({
                &amp;quot;error_code&amp;quot; : &amp;quot;INVALID_TOKEN&amp;quot;
            }, status = 401) # 401에러 : 권한이 없을때 발생
        except User.DoesNotExist:#1-1번 error
            return JsonResponse({
                &amp;quot;error_code&amp;quot; : &amp;quot;UNKNOWN_USER&amp;quot;
            }, status = 401) # 401에러 : 권한이 없을때 발생

        return func(self, request, *args, **kwargs) #5번

    return wrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;데코레이터 구현 및 해당 유저 정보 확인
=&gt; 데코레이터를 만들기 위해 다중 함수 구현, 받은 데이터 중에 토큰이 있는지 if문을 통해 확인
=&gt; 401에러는 권한이 없을 때 발생&lt;/li&gt;
&lt;li&gt;jwt토큰 decode&lt;br&gt;
=&gt; 받은 토큰과 기존에 저장해두었던 SECRET_KEY와 algorithm으로 토큰을 decode
=&gt; decode를 하게 될 경우 프론트엔드에 전달했던 페이로드값만 나옴(즉 로그인뷰에 바디)&lt;/li&gt;
&lt;li&gt;decode한 토큰과 일치하는 유저 정보를 변수에 저장
=&gt;Query문을 이용해 DB에 접근하여 원하는 데이터를 가져온다
=&gt;get메소드를 사용할 경우 DB에서 하나의 row만 가지고 옴(가로)&lt;/li&gt;
&lt;li&gt;프론트엔드에게 받은 request.user에 3번의 자료 저장
=&gt;프론트엔드에게 전달해주기 전 준비과정&lt;/li&gt;
&lt;li&gt;4번에 저장된 request를 데코레이터 리턴&lt;br&gt;
=&gt; 데코레이터종료 및 프론트엔드에게 해당 유저의 정보를 리턴&lt;/li&gt;
&lt;li&gt;테스트할 변수를 views.py에 테스트변수 만들고, urls를 통해 url을 연결한 후  결과가 잘 나오는지 확인  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pip install httpie&lt;/code&gt;
=&gt;views.py에 아래 코드 입력, urls.py에 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#user/views.py
from user.utils import login_decorator  

class Example(View):
    @login_decorator
    def get(self, request):
        user = User.objects.get(id = 11)
        return JsonResponse({
            &amp;#39;user_name&amp;#39;    : user.name            
        })

#user/urls.py
from .views import Example

urlpatterns = [
    path(&amp;#39;/a&amp;#39;, Example.as_view())
    ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;결론 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;결론&lt;/h2&gt;
&lt;p&gt;어떻게 보면 정말 간단한 함수처럼 보이지만 이제 막 개발을 시작하거나 데코레이터를 실전(?)에서 어떻게 써야 하는지 위 자료를 토대로 조금이나마 도움이 됐으면 합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[gatsby 블로그를 위해 알아야 할 것(2)-마크다운언어]]></title><description><![CDATA[마크다운언어의 간단한 사용법]]></description><link>http://seung-jae.github.io//posts/markdownlanguage/</link><guid isPermaLink="false">http://seung-jae.github.io//posts/markdownlanguage/</guid><pubDate>Tue, 09 Jul 2019 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;(읽기 쉽고, 쉽게 표현하기 위해 경어를 사용한 점 양해부탁드립니다.)&lt;/p&gt;
&lt;h2 id=&quot;gatsby-블로그-준비---2-마크다운언어&quot;&gt;&lt;a href=&quot;#gatsby-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A4%80%EB%B9%84---2-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%96%B8%EC%96%B4&quot; aria-label=&quot;gatsby 블로그 준비   2 마크다운언어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby 블로그 준비 - 2 마크다운언어&lt;/h2&gt;
&lt;p&gt;Gatsby 블로그 내용을 작성하기 위해선 마크다운 언어의 숙지가 필수적으로 필요하기 때문에 오늘은 마크다운 언어에 대해 알아보고자 한다.&lt;/p&gt;
&lt;p&gt;먼저, Github에 공개되어 있는 마크다운을 참고하여 마크다운 언어가 무엇인지, 어떤 장단점이 있는지, 어떻게 사용해야 하는지 등을 정리하자면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;마크다운언어란?&lt;/li&gt;
&lt;li&gt;마크다운 언어의 장단점&lt;/li&gt;
&lt;li&gt;문법&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1마크다운-언어란&quot;&gt;&lt;a href=&quot;#1%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EC%96%B8%EC%96%B4%EB%9E%80&quot; aria-label=&quot;1마크다운 언어란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.마크다운 언어란?&lt;/h2&gt;
&lt;p&gt;텍스트 기반의 마크업언어로 쉽게 쓰고, 읽을 수 있으며, HTML로 변환이 가능하다고 하며, 특수기호를 이용해 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다고 한다.
이는 깃허브가 개발자들 사이에서 널리 사용되다 보니 자연스럽게 각광받게 되어 점점 여러곳으로 퍼져서 개발자라면 누구나 사용해야 하는 언어라고 한다.(위코드에서 배움)&lt;/p&gt;
&lt;p&gt;(참고로 마크업언어는 태그등을 이용한 문서나 데이터의 구조를 잡는 언어의 한가지라고 함)&lt;/p&gt;
&lt;h2 id=&quot;마크다운언어의-장단점&quot;&gt;&lt;a href=&quot;#%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%96%B8%EC%96%B4%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;마크다운언어의 장단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마크다운언어의 장단점&lt;/h2&gt;
&lt;p&gt;여러가지가 있지만 몇가지만 얘기하면,&lt;/p&gt;
&lt;h3 id=&quot;장점&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;별도의 도구없이 작성가능 - 특수기호를 이용해 태그없이 사용할 수 있어서 접근성이 우수하다.&lt;/li&gt;
&lt;li&gt;텍스트형식으로 저장되어 용량이 적고, 보관이 용이함&lt;/li&gt;
&lt;li&gt;버전관리시스템(대표적으로 git)을 이용한 변경이력 관리가 편함&lt;/li&gt;
&lt;li&gt;다양한 플랫폼에서의 지원 &gt; 모바일이나 기타 다른 플랫폼에서 모두 사용가능하기에 어디서든 수정이 가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;단점&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;표준이 없어서 변환방식이나 생성물이 다름 - 그냥 써도 무방하지만, 이미지 삽입, 정렬 등을 하기 위해선 HTML 태그를 이용해야 한다.&lt;/li&gt;
&lt;li&gt;표준이 없기 때문에 다양한 확장문법이 생겼고, 다른 플랫폼에서 작동하지 않을 수도 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;결론적으로 지원하는 플랫폼이 많고, 작성이 쉽기 때문에 기본적인 틀만 지킨다면, 어디서든 사용할 수 있을 거 같고, 용량이 적고, 관리가 용이하여 자주 이용할 거 같다는 생각이 든다.&lt;/p&gt;
&lt;h2 id=&quot;문법&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EB%B2%95&quot; aria-label=&quot;문법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문법&lt;/h2&gt;
&lt;p&gt;여러가지 문법 중 개인적으로 자주 사용하게 될 문법을 기준으로 정리해보고자 한다.&lt;/p&gt;
&lt;h2 id=&quot;줄바꿈&quot;&gt;&lt;a href=&quot;#%EC%A4%84%EB%B0%94%EA%BF%88&quot; aria-label=&quot;줄바꿈 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;줄바꿈&lt;/h2&gt;
&lt;p&gt;엔터를 두번치거나 글끝에 띄어쓰기 2번을 하면 줄바꿈이 된다고 한다.(여태까지 엔터만 썻는데,,)  &lt;/p&gt;
&lt;p&gt;첫번째 줄&lt;br&gt;
두번째 줄&lt;/p&gt;
&lt;h2 id=&quot;글씨-사이즈-조절&quot;&gt;&lt;a href=&quot;#%EA%B8%80%EC%94%A8-%EC%82%AC%EC%9D%B4%EC%A6%88-%EC%A1%B0%EC%A0%88&quot; aria-label=&quot;글씨 사이즈 조절 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;글씨 사이즈 조절&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;#&quot;&gt;&lt;pre class=&quot;language-#&quot;&gt;&lt;code class=&quot;language-#&quot;&gt;## H2
### H3 
~ 중략
###### H6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTML의 H태그와 같이 글씨의 크기를 조절해줘서 소주제를 다루는데 좋을 듯 하다.&lt;/p&gt;
&lt;h3 id=&quot;코드블럭&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C%EB%B8%94%EB%9F%AD&quot; aria-label=&quot;코드블럭 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드블럭&lt;/h3&gt;
&lt;p&gt;물결(~) 혹은 탭키 위에 있는 따옴표(`) 3개로 감싸서 코드블럭 생성&lt;/p&gt;
&lt;p&gt;예시)
```{.프로그래밍 언어}
```   &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def sum(a,b):
  return a+b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;인라인-코드블럭&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EC%BD%94%EB%93%9C%EB%B8%94%EB%9F%AD&quot; aria-label=&quot;인라인 코드블럭 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인라인 코드블럭&lt;/h3&gt;
&lt;p&gt;탭 위에 있는 따옴표(`) 1개로 감싸서 인라인 코드블럭 생성
글씨 사이에 &lt;code class=&quot;language-text&quot;&gt;return a+b&lt;/code&gt; 코드 블럭 생성&lt;/p&gt;
&lt;p&gt;파이썬 혹은 다른 프로그램개발언어를 따음표로 감싸면 코드화 할 수 있어서 굉장히 자주 사용할 것 같다.&lt;/p&gt;
&lt;p&gt;(`를 표시하고자 한다면, 역슬러쉬 \ 한 후에 `를 입력하면 된다.)&lt;/p&gt;
&lt;h3 id=&quot;글씨강조&quot;&gt;&lt;a href=&quot;#%EA%B8%80%EC%94%A8%EA%B0%95%EC%A1%B0&quot; aria-label=&quot;글씨강조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;글씨강조&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;굵게&lt;/strong&gt; = **굵게**&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/ihoneymon/652be052a0727ad59601&quot;&gt;깃허브&lt;/a&gt; = [링크문구](url)&lt;/p&gt;
&lt;p&gt;이외에도 수평선 긋기, 목록화하기, 들여쓰기, 표그리기 등 특수문자를 이용하여 다양하게 표현할 수 있는 방법이 있으니 필요하다면 위 깃허브 링크를 참고하면 된다.&lt;br&gt;
정리를 하면서 마크다운 언어에 대해 많은 공부가 되었고, 앞으로 자주 이용해야 겠다.  &lt;/p&gt;
&lt;p&gt;컴퓨터의 발전과정과 Gatsby 블로그에 필요한 마크다운 언어에 대해 알았으니, 다음 포스팅은 Gatsby 블로그 글 작성 및 버전관리에 대해 포스팅을 진행하겠습니다.  &lt;/p&gt;
&lt;h3 id=&quot;마지막까지-읽어주셔서-감사드립니다&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EA%B9%8C%EC%A7%80-%EC%9D%BD%EC%96%B4%EC%A3%BC%EC%85%94%EC%84%9C-%EA%B0%90%EC%82%AC%EB%93%9C%EB%A6%BD%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;마지막까지 읽어주셔서 감사드립니다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막까지 읽어주셔서 감사드립니다.&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[gatsby 블로그를 위해 알아야 할 것(1)-웹사이트 발전과정]]></title><description><![CDATA[웹사이트의 발전과정]]></description><link>http://seung-jae.github.io//posts/webpage</link><guid isPermaLink="false">http://seung-jae.github.io//posts/webpage</guid><pubDate>Mon, 08 Jul 2019 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;(읽기 쉽고, 쉽게 표현하기 위해 경어를 사용한 점 양해부탁드립니다.)&lt;/p&gt;
&lt;h1 id=&quot;gatsby-블로그-준비---1-웹사이트의-발전과정&quot;&gt;&lt;a href=&quot;#gatsby-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A4%80%EB%B9%84---1-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%9D%98-%EB%B0%9C%EC%A0%84%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;gatsby 블로그 준비   1 웹사이트의 발전과정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby 블로그 준비 - 1 웹사이트의 발전과정&lt;/h1&gt;
&lt;p&gt;Gatsby를 알기전에 먼저 현재 이용하고 있는 웹사이트가 어떤 발전과정을 겪었는지 알아보자. &lt;/p&gt;
&lt;h2 id=&quot;1세대-웹사이트동적&quot;&gt;&lt;a href=&quot;#1%EC%84%B8%EB%8C%80-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8%EB%8F%99%EC%A0%81&quot; aria-label=&quot;1세대 웹사이트동적 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1세대 웹사이트(동적)&lt;/h2&gt;
&lt;h3 id=&quot;정적인-언어의-등장&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%96%B8%EC%96%B4%EC%9D%98-%EB%93%B1%EC%9E%A5&quot; aria-label=&quot;정적인 언어의 등장 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적인 언어의 등장&lt;/h3&gt;
&lt;p&gt;초기 웹서버는 &lt;a href=&quot;https://namu.wiki/w/HTML&quot;&gt;HTML(Hyper Text Mark-up Language)&lt;/a&gt;라는 마크업 언어를 사용한 문서를 아무런 꾸밈없이 클라이언트(유저)에게 전달해줌으로써 간단하고, 단순한 정보를 제공하기 위한 것이였다고 한다.(자세한 내용은 위 링크를 참고바람)&lt;/p&gt;
&lt;p&gt;단순한 화면에 &lt;a href=&quot;https://namu.wiki/w/CSS&quot;&gt;CSS(Cascading Style Sheet)&lt;/a&gt;라는 온갖 레이아웃과 디자인 정보를 HTML에 욱여넣다보니 디자인을 위한 문서로 전락했다고 합니다.(자세한 내용이 궁금하시다면 CSS링크를 확인부탁드림)&lt;/p&gt;
&lt;h2 id=&quot;2세대-웹사이트동적정적&quot;&gt;&lt;a href=&quot;#2%EC%84%B8%EB%8C%80-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8%EB%8F%99%EC%A0%81%EC%A0%95%EC%A0%81&quot; aria-label=&quot;2세대 웹사이트동적정적 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2세대 웹사이트(동적+정적)&lt;/h2&gt;
&lt;p&gt;동적인 언어의 등장으로 정적+동적인 사이트를 2세대 웹사이트라고 한다.&lt;/p&gt;
&lt;h3 id=&quot;동적인-언어의-등장&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%96%B8%EC%96%B4%EC%9D%98-%EB%93%B1%EC%9E%A5&quot; aria-label=&quot;동적인 언어의 등장 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적인 언어의 등장&lt;/h3&gt;
&lt;p&gt;CSS 이후 동적으로 컨텐츠를 바꾸고, 멀티미디어와 움직이는 이미지 등을 가능하게 하는
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/What_is_JavaScript&quot;&gt;JavaScript&lt;/a&gt;와 PHP,C,Python 등의 프로그래밍 언어가 등장하면서 웹은 빠른속도로 발전하게 되었다. “동적”이란 서버와 클라이언트에게 서로 각기 다른 상황에서 적절한 정보가 보이고, 컨텐츠를 웹페이지나 앱상에 계속적으로 노출시키는 역할을 한다.(자바스크립트 언어를 배우기 위해 MDN에서 많이 검색했었고, 자바스크립트를 배우고자 한다면 꼭 참고해야 하는 사이트인 듯 하다.)&lt;/p&gt;
&lt;h3 id=&quot;프론트엔드와-백엔드의-구별&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%99%80-%EB%B0%B1%EC%97%94%EB%93%9C%EC%9D%98-%EA%B5%AC%EB%B3%84&quot; aria-label=&quot;프론트엔드와 백엔드의 구별 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프론트엔드와 백엔드의 구별&lt;/h3&gt;
&lt;p&gt;자바스크립트가 주가 되어 HTML 생성부터 클라이언트가 보는 모든 부분을 구현해 웹사이트들이 전체적으로 동적으로 변화되었다.&lt;/p&gt;
&lt;p&gt;그러면서 프론트엔드는 페이지 렌터링에 필요한 HTML,CSS,JavaScript파일을 전송하는 역할을 맡고, 백엔드는 필요한 데이터생성 및 전송을 담당하면서 역할이 분담되었다.&lt;/p&gt;
&lt;h2 id=&quot;3세대-웹사이트정적인-웹사이트&quot;&gt;&lt;a href=&quot;#3%EC%84%B8%EB%8C%80-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8&quot; aria-label=&quot;3세대 웹사이트정적인 웹사이트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3세대 웹사이트(정적인 웹사이트)&lt;/h2&gt;
&lt;p&gt;3세대로 넘어오면서 벡앤드는 클라이언트(유저)와 지속적인 데이트를 전송하는 반면, 프론트엔드는 HTML과 CSS, JavaScript를 한번만 보내주는 형식으로 바뀌었고,
동적과 정적인 웹사이트에서 정적인 웹사이트로 발전하고 있다.동적 웹사이트도 분명 장점은 있지만, 정적 웹사이트의 장점을 꼽자면,
&lt;strong&gt;i)동적인 웹사이트보다 더 빠르고,&lt;/strong&gt;
&lt;strong&gt;ii)비용이 적게 든다고 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기본적인 웹사이트의 발전과정을 알아보았고, 다음은 3세대(?)언어인 리액트를 이용한 GatsbyJS를 직접 작성 및 관리하기 위해 필수로 알아야할 언어인 마크다운 언어에 대해 포스팅해보겠다.&lt;/p&gt;</content:encoded></item></channel></rss>