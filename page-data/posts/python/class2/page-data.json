{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python/class2","webpackCompilationHash":"39e40b18a4d0c5e11938","result":{"data":{"markdownRemark":{"id":"977ab1be-57bf-5325-8c86-e9a82ccd4fb6","html":"<h2 id=\"클래스-사용법\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"클래스 사용법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 사용법</h2>\n<p><a href=\"https://docs.python.org/ko/3/tutorial/classes.html\">파이썬 공식문서</a></p>\n<p>전 시간에 클래스에 대해 알아봤는데, 이번엔 어떻게 써야 할지에 대해 자세히 알아보고자 한다.  </p>\n<p>클래스 객체는 어트리뷰트 참조(클래스 내부의 변수나 함수에 접근)와 인스턴스(실체화)를 만든다</p>\n<p>메소드에 <code class=\"language-text\">__</code>의 사용은 2가지로 나뉜다.  </p>\n<ol>\n<li>init과 같은 특별한 메소드를 사용해야 할 때(메소드의 종류나 사용법이 궁금하다면 이 <a href=\"https://corikachu.github.io/articles/python/python-magic-method\">페이지</a>를 참고하거나, 구글링을 하면 더 많은 정보가 나와있다.)  </li>\n<li>맹글링을 위한 메소드  </li>\n<li>맹글링이란 컴파일러나 인터프리터가 변수나 함수명을 일정한 규칙에 의해 변형시키는 것을 의</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#Attribute\nclassname.variable          #변수일 경우 호출 방법\nclassname.function(input)   #메서드(함수)일 경우 호출 방법\n\n#Instance\n#x = classname()            #instance 생성</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Flight:\n\n    def __init__(self):\n        print(&#39;init&#39;)\n        super().__init__()\n\n    def __new__(cls):\n        print(&#39;new&#39;)\n        return super().__new__(cls)\n\n    def number(self):\n        return &#39;SN060&#39;\n\nfrom airtravel import Flight\nf = Flight()\nnew\ninit</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">calss Dog:                    # CamelCase로 첫글자 대문자로 클래스 선언\n    \n    kind   = &#39;canine&#39;           # 변수선언(공유됨)\n    tricks = []\n\n    def __init__(self, name): # 인스턴스에 따라 값이 변함\n        self.name = name\n\n    def add_trick(self, trick):\n        self.tricks.append(trick)\n\n&gt;&gt;&gt; d = Dog(&#39;Fido&#39;)   # d 인스턴스 생성\n&gt;&gt;&gt; e = Dog(&#39;Buddy&#39;)  # e 인스턴스 생성\n&gt;&gt;&gt; d.kind            # 변수 kind 호출\n&#39;canine&#39;\n&gt;&gt;&gt; e.kind            # 변수 kind 호출 == d와 같은 값\n&#39;canine&#39;\n&gt;&gt;&gt; d.name            # 메소드 호출 == 인풋 데이터를 name에 넣음\n&#39;Fido&#39;\n&gt;&gt;&gt; e.name            # 메소드 호출 =&gt; 인풋 데이터를 name에 넣음\n&#39;Buddy&#39;\n&gt;&gt;&gt; d.add_trick(&#39;roll over&#39;)\n&gt;&gt;&gt; e.add_trick(&#39;play dead&#39;)\n&gt;&gt;&gt; d.tricks\n[&#39;roll over&#39;, &#39;play dead&#39;] </code></pre></div>\n<ol>\n<li>클래스를 선언  </li>\n<li>Attribute 작성  </li>\n<li>instance 생성(d, e)  </li>\n<li>instance.Attribute로 호출 </li>\n</ol>\n<blockquote>\n<blockquote>\n<p>주의사항: 위 add_trick과 같이 list를 사용하게 되면 리스트의 값은 공유되기 때문에  초기화자(<strong>init</strong>)에 빈 list를 추가해두어야 한다. </p>\n</blockquote>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Dog:\n    ~ 중략~\n    def __init__(self, name):\n        self.name  = name\n        self.tricks = []\n    ~ 중략 ~</code></pre></div>\n<h3 id=\"주의사항\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의사항</h3>\n<ol>\n<li>데이터 Attribute(이하 ‘속성’)은 같은 이름의 메서드를 덮어쓰기 떄문에 의도하지 않게 충돌이 될 수 있다. 메서드에는 동사를, 속성에는 명사를 쓰는 것이 좋다.  </li>\n<li>파이썬코드는 숨기는 기능이 없기 때문에 클라이언트가 참조될 수도 있다.  </li>\n<li>메서드는 일반 함수들과 마찬가지로 전역 이름을 참조할 수 있기 때문에 헷갈리지 않게 조심하자.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Flight:\n\n    def __init__(self, number):\n        if not number[:2].isalpha():\n            raise ValueError(&quot;첫 두글자가 알파벳이 아닙니다.&quot;)\n        if not number[:2].isupper():\n            raise ValueError(&quot;첫 두글자가 대문자가 아닙니다.&quot;)\n        if not number[2:].isdigit():\n            raise ValueError(&quot;세번째 글자 이상이 양의 숫자가 아닙니다.&quot;)\n        self.__number = number\n\n    def number(self):\n        return self.__number</code></pre></div>\n<p><code class=\"language-text\">_name</code>의 경우 외부에서 호출이 가능하지만, 이 함수는 내부에서만 사용하기 위해 정의해 둔 것이라고 생각하면 쉬울 듯 하다. 파이썬을 공부한 사람들이라면, <code class=\"language-text\">_</code>가 붙은 메서드를 호출한다면 권유의 문법이라고 불린다고 한다. 위 예제에서는 외부에서 접근을 못하게 하기 위해 <code class=\"language-text\">__</code>을 사용했다.<br>\n만약 <code class=\"language-text\">__name</code>을 호출하게 될 경우 에러메시지가 나온다.</p>\n<p>참고 사이트:<br>\n<a href=\"https://docs.python.org/ko/3/tutorial/classes.html\">파이썬 공식문서</a><br>\n<a href=\"https://wikidocs.net/16071\">위키독스-파이썬기초</a>\n<a href=\"https://gomguard.tistory.com/125\">곰가드의 라이브러리</a>  </p>","fields":{"slug":"/posts/python/class2","tagSlugs":["/tag/python-3/","/tag/wecode/","/tag/class/"]},"frontmatter":{"date":"2019-07-17T08:46:37.121Z","description":"Python Class - How to use","tags":["Python3","Wecode","Class"],"title":"Python Class - 사용법"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python/class2"}}}