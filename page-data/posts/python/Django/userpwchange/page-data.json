{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python/Django/userpwchange","webpackCompilationHash":"0fa13323aa1669bf2a4b","result":{"data":{"markdownRemark":{"id":"54a7e58e-22ae-5674-b117-466be085e940","html":"<hr>\n<p>오늘은 라이브러리를 json과 bcrypt를 제외한 다른 라이브러리를 사용하지 않고 유저의 패스워드 변경관련해서 포스팅 해보려 한다.</p>\n<hr>\n<p>일단 유저의 회원가입과 로그인에 대해 자세히 알아보자.</p>\n<p>기본적으로 유저가 회원가입을 시도하면, 기존에 가입된 아이디나 휴대폰번호, 이메일이 있는지 확인하고, 동일한 정보가 없다면 DB에 회원의 정보를 저장(패스워드는 Bcrypt나 단방향 암호화를 한 후에 저장한다.)하고 회원가입이 되었다는 것을 프론트엔드에게 알려준다. 그 후, 유저가 로그인을 시도하면 DB에 저장된 아이디와 패스워드가 일치하는지 확인한 후 일치한다면 <code class=\"language-text\">access_token</code>과 로그인성공 메세지를 프론트엔드에게 전달해준다.<br>\n(해당 과정은 아래 블로그에 자세히 설명되어 있으니 한번 읽고 와주길 바란다.)\n<a href=\"https://koreanblacklee.github.io/posts/decorator/\">pyJWT를 이용한 Python Django Login Decorator</a></p>\n<p>유저의 패스워드 변경은 위 <code class=\"language-text\">access_token</code>과 파이썬 데코레이터를 이용해서 해당 유저가 가입된 유저인지 확인 한 후 기존 패스워드와 변경될 패스워드를 받아서 진행한다.\n유저가 패스워드 변경을 시도하면</p>\n<ol>\n<li>jwt토큰과 유저의 원래 패스워드, 변경하고 싶은 패스워드를 받고</li>\n<li>유저의 이메일이 기존에 가입되어 있는 유저인지(데코레이터가 확인),</li>\n<li>유저의 기존 패스워드가 동일한지 체크해서</li>\n<li>맞다면 유저의 패스워드를 변경</li>\n<li>기존 패스워드가 아닐 경우 > <code class=\"language-text\">INVALID_PASSWORD</code></li>\n</ol>\n<p>회원가입과 반대로 진행하면 된다고 생각하면 쉬울 듯 하다.</p>\n<p>그럼 이제 파이썬 코드를 보자.<br>\n(패스워드를 암호화하기 위해 <code class=\"language-text\">bcrypt</code>를 이용했고, <code class=\"language-text\">access_token</code>은 pyJWT를 이용했다.)  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@login_decorator # 유저가 로그인이 되었는지 확인하기 위한 데코레이터\ndef post(self, request):\n        user_info = json.loads(request.body) # 프론트엔드에서 바디로 보내준 정보를 변수에 저장\n        current_pw = user_info[&quot;current_password&quot;] # 기존의 패스워드를 변수에 저장\n        new_pw = user_info[&quot;new_password&quot;] #변경될 패스워드를 변수에 저장\n\n        if bcrypt.checkpw(current_pw.encode(&quot;UTF-8&quot;), request.user[&quot;password&quot;].encode(&quot;UTF-8&quot;)): # 유저의 패스워드가 맞는지 확인\n            bytes_pw = bytes(new_pw, &#39;utf-8&#39;) \n            new_hashed_pw = bcrypt.hashpw(bytes_pw, bcrypt.gensalt()) #패스워드를 `bcrypt`를 이용해 단방향 암호화 진행\n\n            request.user.password = new_hashed_pw\n            request.user.save() # DB에 유저의 변경된 패스워드를 저장\n\n            return JsonResponse(\n                {\n                    &quot;message&quot; : &quot;SUCCESS&quot;\n                }, status = 200) # 프론트엔드에게 잘 되었다고 얘기해줌\n\n        else:\n            return JsonResponse(\n                {\n                    &quot;message&quot; : &quot;INVALID_PASSWORD&quot;\n                }, status = 400) # 만약 패스워드가 기존에 저장된 값과 다르다면 메세지와 함께 status 400을 프론트엔드에게 전달해주자.</code></pre></div>\n<p>각각의 주석을 달아두었으니 코드가 이해가 안된다면 한번씩 읽어보길 바란다.</p>\n<p>여기서 중요하게 봐야 할 점은,   </p>\n<ol>\n<li>해당 함수가 실행되기 전 데코레이터가 실행되며, 데코레이터에서 회원의 정보와 <code class=\"language-text\">access_token</code>등을 받아서 <code class=\"language-text\">post</code>함수가 실행된다.</li>\n<li>로그인 확인하기 위한 데코레이터가 있기 때문에 <code class=\"language-text\">access_token</code>이 decode가 되는지, 이미 로그인한 회원인지 등은 여기서 별도로 확인안해도 된다.(<code class=\"language-text\">request.user.password</code>가 그 예이다.)    </li>\n</ol>\n<p>현재 개발을 배우고 있는 나는 데코레이터를 오랫만에 사용하다 보니 위 과장을 정확히 인지를 못하고 있었다. 이번 기회로 머리에 정확히 박혀 있으면 좋으련만,, 내 기억력은 나조차 못믿어서,, 잘 기억하기 위해 매일 블로그를 한번 씩 보면서 되새겨야 겠다.</p>\n<p>로그인, 회원가입을 계속 하다보니 로직을 짜는건 쉬웠는데 데코레이터를 생각못해서 시간을 많이 허비한 점이 아쉽긴 하지만 다시 한번 배웠다고 생각하고 다음으로 넘어가야 겠다.   </p>\n<p>구글링을 하면 프레임워크밖에 안나오는데, 프레임워크말고 기본적으로 어떻게 돌아가는지 알고 넘어가자.</p>","fields":{"slug":"/posts/python/Django/userpwchange","tagSlugs":["/tag/python-3/","/tag/wecode/","/tag/django/"]},"frontmatter":{"date":"2019-07-25T012:46:37.121Z","description":"Djangp / ChangePassword","tags":["Python3","Wecode","Django"],"title":"Django를 활용한 유저 패스워드 변경(백엔드)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python/Django/userpwchange"}}}