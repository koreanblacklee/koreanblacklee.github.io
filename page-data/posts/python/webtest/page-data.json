{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python/webtest","webpackCompilationHash":"2f056425e511a1965d79","result":{"data":{"markdownRemark":{"id":"d7acb35b-7397-58c1-a995-a62282a11e4c","html":"<hr>\n<p>자료구조란 데이터에 편리하게 접근하고, 변경하기 위해서 데이터를 저장하거나 조작하는 방법이며, 데이터의 목적에 따라 자료구조를 잘 선택해야 하기 때문에 각 자료구조의 장점과 한계를 잘 아는 것이 중요하다.  </p>\n<h3 id=\"단순구조\"><a href=\"#%EB%8B%A8%EC%88%9C%EA%B5%AC%EC%A1%B0\" aria-label=\"단순구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단순구조</h3>\n<p>프로그래밍에서 사용되는 기본 데이터 타입</p>\n<ol>\n<li>Integer</li>\n<li>Float</li>\n<li>String</li>\n<li>Boolean  </li>\n</ol>\n<h3 id=\"비단순-구조\"><a href=\"#%EB%B9%84%EB%8B%A8%EC%88%9C-%EA%B5%AC%EC%A1%B0\" aria-label=\"비단순 구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비단순 구조</h3>\n<p>단순데이터를 저장하는 구조가 아닌 여러 데이터를 목적에 맞게 효과적으로 저장하는 자료 구조.\nArray: 파이썬에서 메모리를 효율적으로 사용할 때 사용\n순차적으로 데이터를 저장함, 실제로 메모리상에서 순차적으로 저장됨</p>\n<p>multi dimentional array =>\n리스트안에 리스트로 되어 있고,\n주로 매트릭스(벡터 계산)를 구현할 때, 장기판, 바둑판, 지도 등에서 사용됨</p>\n<p>단점\nsearching\ndelete: 제일 앞이나 중간에 있는 데이터를 삭제할 때(순서를 지켜줘야 하니까 뒤에 있는걸 땡겨줘야 됨)</p>\n<p>array resizing: 주소의 연결성을 확보하기 위해 리스트를 안써도 메모리는 데이터 공간을 확보해놓기 떄문에 리스트를 새로운 메모리로 넣어야 함</p>\n<blockquote>\n<p>새로운 메모리를 만들었는데, 사이즈가 꽉 차서 넣을 자리가 없다면 다른 리스트를 만들어서 넣어주어야 함 > 메모리상에서 일어나는 일이기 때문에 코드만으로는 확인할 수 없음 > 시스템이 느려지는 이유 등의 요소임</p>\n</blockquote>\n<p>애초에 할당을 크게 하던가, 링크 리스트라는 데이터 스트럭처를 사용해야 함\n링크드 리스트 데이터 스트럭처는 리스트인데 메모리상으로 순차적으로 저장이 안되도 순서대로 저장해줄 수 있는 자료구조임(포인터 같은걸로 연결함)\n클라스를 사용해서 연결한다는 걸 저장해놓고 nextval(포인터) > Node로 연결시킴\n슬랙 참고</p>\n<p>리사이징의 문제는 없음\n한 값이 모두 클라스여서 메모리를 많이 잡아 먹음(100개면 100개의 객체를 만들어야 하니까)</p>\n<p>기회비용 > 메모리, 시간 > 일반적으로 메모리 금액이 저렴해서 시간을 더 중요시 함</p>\n<p>더블 링크드 리스트는 앞뒤로 찾을 수 있음\n서퀴드 링크드 리스트는 돌면서 찾음 > 2~3개 이상</p>\n<p>수정삭제가 빈번할 때, (리사이징 확률이 높을 때 링크드 리스트를 사용하는 것이 좋음)\narr가 효율이 제일 좋음\n데이터 저장에 대해 변수가 많을 때 사용됨</p>\n<p>Tuple\n요소수가 리스트보다 적고, 2개~5개 사이에서 저장할 때만 씀\n간단한 데이터를 표현하고 싶을 때 사용됨(좌표같은 것을 사용할 때 좋음)\n튜플이 있으면 클라스를 따로 안만들어도 됨 (튜플이 훨씬기능적임)\n엘레멘트가 많아지면 그 다음부터 어떤 데이터인지 확인할 수 없기 때문에 5개 이상 안씀</p>\n<p>named Tuple\n튜플인데 각각의 요소에 네임을 줌</p>\n<p>set\n값을 숫자로 단방향 해쉬로 만들고 해쉬가 들어갈 수 있는 공간의 수와 나눔\nex) 1234%30 = 나머지 값이 인덱싱의 주소가 됨\n해쉬 컴플릭트\n넘버 값이 아닌 다른 값이 인덱싱을 가능하게 해줌</p>\n<p>해쉬충돌이 남 > 해쉬충돌이 덜 나게 해야 됨 >동일한 버켓에 링크드 리스트를 사용해서 저장함 > 충돌이 덜 나게 코딩 해야 됨</p>\n<p><strong>이퀄</strong> 위에 <strong>해쉬</strong>함수가 있고, <strong>해쉬</strong>함수는 메모리의 주소를 보는 것 > 고급</p>\n<p>키 값을 해쉬 기반으로 저장 > 키를 해쉬화 해서 해당 버켓에 키와 값을 저장 </p>\n<p>셋이나 딕셔너리도 마찬가지\n제일 빠른건 인덱싱을 찾는것 > 룩업\n세트가 룩업이 제일 빠름</p>\n<p>리스트 = O(n)\n세트 = O(1)</p>\n<h4 id=\"선형구조\"><a href=\"#%EC%84%A0%ED%98%95%EA%B5%AC%EC%A1%B0\" aria-label=\"선형구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선형구조</h4>\n<p>저장되는 자료의 전후관계가 1:1 (리스트, 스택, 큐 등)</p>\n<h4 id=\"비선형구조\"><a href=\"#%EB%B9%84%EC%84%A0%ED%98%95%EA%B5%AC%EC%A1%B0\" aria-label=\"비선형구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비선형구조</h4>\n<p>데이터 항목 사이의 관계가 1:n 또는 n:m(트리, 그래프 등)</p>\n<p>데이터를 백엔드가 관리하니까 자료구조가 중요함 => 데이터를 효율적으로 관리하는게 중요\n기초적이라고 생각하기 때문에 면접볼때 많이 물어봄</p>\n<p>알고리즘, 데이터 스트럭쳐 거기에 맞는 알고리즘과 알맞는 데이터구조를 쓰면 됨</p>\n<p>mocking\n실제 클래스를 호출 안해도 간단하게 mocking클라스로 간단하게 테스트 할 수 있게 하는 것</p>\n<p>patch > 덧대는 것 > 일반적인 마킹이 안될 떄 덧땜 > 코드상 마킹하기 힘들 때 > requests를 할 때 requests를 어떻게 할 지 어렵기 때문에 패치를 사용 함</p>\n<p>requests라는 라이브러리를 직접 못 짜서 ?</p>\n<p>테스트를 할 파일에서 사용될 테스트의 목을 만들어서 사용함 (user.views.requests)</p>\n<p>난 패치를 건줄 알았는데 안걸려 있을 때 > 패치하려던게 이미 값이 있을 때 > 경로문제, 타이밍 문제가 많음</p>\n<p>프린트 열라게 찍어봐야 됨</p>\n<p>리베이스 스쿼시 마스터 위에 이쁘게 </p>","fields":{"slug":"/posts/python/webtest","tagSlugs":["/tag/python-3/","/tag/wecode/","/tag/test/"]},"frontmatter":{"date":"2019-07-18T08:46:37.121Z","description":"What Is Data Sturcture?","tags":["Python3","Wecode","Test"],"title":"What Is Data Sturcture?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python/webtest"}}}