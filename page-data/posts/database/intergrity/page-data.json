{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/database/intergrity","webpackCompilationHash":"39e40b18a4d0c5e11938","result":{"data":{"markdownRemark":{"id":"baa2a524-968a-5de0-b785-4941fa9d230d","html":"<hr>\n<p>이번 시간에는 관계형 데이터베이스에서의 제약조건과 해당 Key의 종류를 알아보고자 한다.\n데이터베이스의 기본적인 개념이 정리가 안되어 있다면, 아래 2개의 블로그를 읽고 온다면 좀 더 쉽게 이해할 수 있을 것이다.</p>\n<p><a href=\"https://koreanblacklee.github.io/posts/database\">Database란?</a><br>\n<a href=\"https://koreanblacklee.github.io/posts/database/schema\">Database란?-2(schema)</a></p>\n<hr>\n<h2 id=\"관계형-데이터베이스의-제약조건\"><a href=\"#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4\" aria-label=\"관계형 데이터베이스의 제약조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관계형 데이터베이스의 제약조건</h2>\n<p>제약조건으로는 아래와 같은 두가지의 <strong>무결성</strong>(개체 무결성, 참조 무결성) 이 있고, 무결성을 보장하기 위해 <strong>Key</strong> 를 이용하고 있다.(이는 데이터베이스의 AICD중 일관성에 해당하는 부분이다.)</p>\n<h3 id=\"key란\"><a href=\"#key%EB%9E%80\" aria-label=\"key란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key란?</h3>\n<ul>\n<li>데이터베이스에서 조건에 만족하는 튜플(행)을 찾거나 순서대로 정렬할 때 다른 튜플들과 구별할 수 있는 유일한 기준이 되는 속성을 의미 함(데이터베이스에서 데이터들을 구별할 수 있는 기준)</li>\n</ul>\n<h3 id=\"key의-종류\"><a href=\"#key%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"key의 종류 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key의 종류</h3>\n<ol>\n<li>\n<p>Candidate Key(후보키)    </p>\n<ul>\n<li>튜플의 유일성을 식혈할 수 있는 모든 Key다. 즉, Primary Key말고 해당 행에서 고유한 값을 가질 수 있는 키들을 의미한다.(하나 혹은 그 이상의 컬럼이 될 수 있으며 고유값을 가지고 있기 때문에 Primary Key로 사용가능하여 후보키 라고 함)</li>\n</ul>\n</li>\n<li>\n<p>Primary Key(기본키)  </p>\n<ul>\n<li>\n<p>튜플의 유일성 확보를 위해 후보키 중에 선택된 Key이다.</p>\n<ul>\n<li>유일성: 하나의 키 값으로 하나의 튜플을 유일하게 식별할 수 있어야 하는 것</li>\n</ul>\n</li>\n<li>테이블의 각 행들을 고유하게 식별할 수 있는 Key</li>\n<li>Django에서는 테이블 별로 기본적으로 <code class=\"language-text\">id</code>라는 Primary Key를 자동으로 만들어 주며, 만약 자동으로 만들지 않고 아래와 같이 입력하면 다른 속성(Attribute) 중에 Primary Key를 지정할 수도 있다.</li>\n<li>고유한 값을 가지고 있고, null값을 가지고 있으면 안됨</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"models.py\"><pre class=\"language-models.py\"><code class=\"language-models.py\">from django.db import models\n\n\nclass User(models.Model):\n    user_email = models.CharField(max_length=100, primary_key=True)\n    ...</code></pre></div>\n<ol start=\"3\">\n<li>\n<p>Alternate Key(대체키)</p>\n<ul>\n<li>두개 이상의 후보키가 있는 경우 기본키를 제외한 나머지 후보키로 이른 바 보조키를 의미한다.</li>\n<li>후보키에서 기본키로 사용될 잠재적 역량을 가졌지만(고유값을 가진) 기본키로 선택되지 못한 키를 얘기한다.(고유값을 가지고 있기 때문에 언제든지 대체할 수 있기 때문에 대체키라고 한다고 한다.)</li>\n</ul>\n</li>\n<li>\n<p>Foreign Key(외래키)</p>\n<ul>\n<li>관계형 데이터베이스에서 다른 테이블끼리의 연결을 위해 중요한 역할을 하는 key다.</li>\n<li>관계된 다른 테이블(=Entity, Table)간의 참조관계를 나타내기 위한 Key이며, 하나 혹은 하나 이상의 속성들의 집합이다.  </li>\n</ul>\n</li>\n</ol>\n<p>홈페이지에서 사용자가 있고, 댓글을 작성하는 기능이 있다면 댓글이 저장되는 테이블에서 사용자가 외래키로 등록이 되어 있어야 어떤 사용자가 댓글을 달았는지 참조 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># users/models.py\nfrom django.db import models\n\n\nclass User(models.Model):\n    name = models.CharField(max_length=100)\n    ...</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># comment/models.py\nfrom django.db import models\nfrom users.models import User   #User디렉토리의 models.py파일에 있는 User를 사용하기 위해 import함\n\n\nclass Comment(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    post = models.CharField(max_length=255)\n    ...</code></pre></div>\n<ol start=\"5\">\n<li>\n<p>Super Key(슈퍼키)</p>\n<ul>\n<li>릴레이션 내에 있는 <strong>속성들(Attribute)</strong> 의 집합으로 구성된 최소성이 없는 Key를 의미한다.</li>\n<li>특정 튜플(행)을 식별할 수만 있다면 Super Key가 될 수 있다.</li>\n<li>최소성: 키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성을 구성되어야 한다는 것</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"데이터-무결성\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AC%B4%EA%B2%B0%EC%84%B1\" aria-label=\"데이터 무결성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 무결성</h2>\n<ul>\n<li>데이터의 정확성과 일관성을 유지하고 보증하는 것을 의미한다.</li>\n</ul>\n<h3 id=\"개체-무결성\"><a href=\"#%EA%B0%9C%EC%B2%B4-%EB%AC%B4%EA%B2%B0%EC%84%B1\" aria-label=\"개체 무결성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개체 무결성</h3>\n<ul>\n<li>기본키(primary<em>key)와 관련된 것으로 모든 테이블은 Primary</em>key를 가져야 하며, Null(빈 값)이 들어갈 수 없음</li>\n</ul>\n<h3 id=\"참조-무결성\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EB%AC%B4%EA%B2%B0%EC%84%B1\" aria-label=\"참조 무결성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 무결성</h3>\n<ul>\n<li>\n<p>외래키(ForeignKey)와 관련된 것으로 외래키는 참조 테이블의 키본키 값 또는 Null값을 가지며, 참조 테이블의 기본키 속성 개수와 도메인이 일치해야 함</p>\n<ul>\n<li>도메인: model을 설정할 때 각 속성이 어떤 타입인지, 최대 몇글자인지 등 데이터의 형식을 정의하는데, 도메인은 이러한 데이터 형식에 맞는 값들의 집합이라고 하면 될듯 하다.</li>\n</ul>\n</li>\n<li>A라는 테이블이 B라는 테이블에 외래키로 참조되고 있을 때, B테이블에서의 데이터를 사용자의 실수로 삭제되거나 수정되는 것을 막아준다.</li>\n</ul>\n<p>참고 사이트:</p>\n<p><a href=\"https://gomcine.tistory.com/entry/Database-8-RDB%EC%9D%98-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4-Key%EC%99%80-%EB%AC%B4%EA%B2%B0%EC%84%B1?category=733455\">관계형 데이터베이스의 제약조건(Key와 무결성)</a><br>\n<a href=\"https://jhnyang.tistory.com/71?category=817647\">릴레이션 키 개념&#x26; 종류</a>  </p>","fields":{"slug":"/posts/database/intergrity","tagSlugs":["/tag/database/","/tag/intergrity/","/tag/wecode/"]},"frontmatter":{"date":"2019-08-08T12:46:37.121Z","description":"Database","tags":["Database","Intergrity","Wecode"],"title":"Database란?-3(관계형 데이터베이스의 제약조건 및 Key)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/database/intergrity"}}}